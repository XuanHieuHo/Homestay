// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: booking.sql

package db

import (
	"context"
	"time"
)

const createBooking = `-- name: CreateBooking :one
INSERT INTO bookings (
  id,
  user_booking,
  homestay_booking,
  promotion_id,
  payment_id,
  status,
  booking_date,
  checkin_date,
  checkout_date,
  number_of_guest,
  service_fee,
  tax
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
) RETURNING id, user_booking, homestay_booking, promotion_id, payment_id, status, booking_date, checkin_date, checkout_date, number_of_guest, service_fee, tax
`

type CreateBookingParams struct {
	ID              int64     `json:"id"`
	UserBooking     string    `json:"user_booking"`
	HomestayBooking int64     `json:"homestay_booking"`
	PromotionID     int64     `json:"promotion_id"`
	PaymentID       int64     `json:"payment_id"`
	Status          string    `json:"status"`
	BookingDate     time.Time `json:"booking_date"`
	CheckinDate     time.Time `json:"checkin_date"`
	CheckoutDate    time.Time `json:"checkout_date"`
	NumberOfGuest   int32     `json:"number_of_guest"`
	ServiceFee      string    `json:"service_fee"`
	Tax             string    `json:"tax"`
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (Booking, error) {
	row := q.db.QueryRowContext(ctx, createBooking,
		arg.ID,
		arg.UserBooking,
		arg.HomestayBooking,
		arg.PromotionID,
		arg.PaymentID,
		arg.Status,
		arg.BookingDate,
		arg.CheckinDate,
		arg.CheckoutDate,
		arg.NumberOfGuest,
		arg.ServiceFee,
		arg.Tax,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.UserBooking,
		&i.HomestayBooking,
		&i.PromotionID,
		&i.PaymentID,
		&i.Status,
		&i.BookingDate,
		&i.CheckinDate,
		&i.CheckoutDate,
		&i.NumberOfGuest,
		&i.ServiceFee,
		&i.Tax,
	)
	return i, err
}

const deleteBooking = `-- name: DeleteBooking :exec
DELETE FROM bookings WHERE id = $1
`

func (q *Queries) DeleteBooking(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBooking, id)
	return err
}

const getBooking = `-- name: GetBooking :one
SELECT id, user_booking, homestay_booking, promotion_id, payment_id, status, booking_date, checkin_date, checkout_date, number_of_guest, service_fee, tax FROM bookings
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBooking(ctx context.Context, id int64) (Booking, error) {
	row := q.db.QueryRowContext(ctx, getBooking, id)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.UserBooking,
		&i.HomestayBooking,
		&i.PromotionID,
		&i.PaymentID,
		&i.Status,
		&i.BookingDate,
		&i.CheckinDate,
		&i.CheckoutDate,
		&i.NumberOfGuest,
		&i.ServiceFee,
		&i.Tax,
	)
	return i, err
}

const listBookingByHomestay = `-- name: ListBookingByHomestay :many
SELECT id, user_booking, homestay_booking, promotion_id, payment_id, status, booking_date, checkin_date, checkout_date, number_of_guest, service_fee, tax FROM bookings
WHERE homestay_booking = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListBookingByHomestayParams struct {
	HomestayBooking int64 `json:"homestay_booking"`
	Limit           int32 `json:"limit"`
	Offset          int32 `json:"offset"`
}

func (q *Queries) ListBookingByHomestay(ctx context.Context, arg ListBookingByHomestayParams) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, listBookingByHomestay, arg.HomestayBooking, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Booking{}
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.UserBooking,
			&i.HomestayBooking,
			&i.PromotionID,
			&i.PaymentID,
			&i.Status,
			&i.BookingDate,
			&i.CheckinDate,
			&i.CheckoutDate,
			&i.NumberOfGuest,
			&i.ServiceFee,
			&i.Tax,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBookingByUser = `-- name: ListBookingByUser :many
SELECT id, user_booking, homestay_booking, promotion_id, payment_id, status, booking_date, checkin_date, checkout_date, number_of_guest, service_fee, tax FROM bookings
WHERE user_booking = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListBookingByUserParams struct {
	UserBooking string `json:"user_booking"`
	Limit       int32  `json:"limit"`
	Offset      int32  `json:"offset"`
}

func (q *Queries) ListBookingByUser(ctx context.Context, arg ListBookingByUserParams) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, listBookingByUser, arg.UserBooking, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Booking{}
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.UserBooking,
			&i.HomestayBooking,
			&i.PromotionID,
			&i.PaymentID,
			&i.Status,
			&i.BookingDate,
			&i.CheckinDate,
			&i.CheckoutDate,
			&i.NumberOfGuest,
			&i.ServiceFee,
			&i.Tax,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBooking = `-- name: UpdateBooking :one
UPDATE bookings
SET status = $2, checkout_date = $3
WHERE id = $1
RETURNING id, user_booking, homestay_booking, promotion_id, payment_id, status, booking_date, checkin_date, checkout_date, number_of_guest, service_fee, tax
`

type UpdateBookingParams struct {
	ID           int64     `json:"id"`
	Status       string    `json:"status"`
	CheckoutDate time.Time `json:"checkout_date"`
}

func (q *Queries) UpdateBooking(ctx context.Context, arg UpdateBookingParams) (Booking, error) {
	row := q.db.QueryRowContext(ctx, updateBooking, arg.ID, arg.Status, arg.CheckoutDate)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.UserBooking,
		&i.HomestayBooking,
		&i.PromotionID,
		&i.PaymentID,
		&i.Status,
		&i.BookingDate,
		&i.CheckinDate,
		&i.CheckoutDate,
		&i.NumberOfGuest,
		&i.ServiceFee,
		&i.Tax,
	)
	return i, err
}
