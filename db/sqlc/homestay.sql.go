// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: homestay.sql

package db

import (
	"context"
)

const createHomestay = `-- name: CreateHomestay :one
INSERT INTO homestays (
  description,
  address,
  number_of_bed,
  capacity,
  price,
  status,
  main_image,
  first_image,
  second_image,
  third_image
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, description, address, number_of_bed, capacity, price, status, main_image, first_image, second_image, third_image
`

type CreateHomestayParams struct {
	Description string  `json:"description"`
	Address     string  `json:"address"`
	NumberOfBed int32   `json:"number_of_bed"`
	Capacity    int32   `json:"capacity"`
	Price       float64 `json:"price"`
	Status      string  `json:"status"`
	MainImage   string  `json:"main_image"`
	FirstImage  string  `json:"first_image"`
	SecondImage string  `json:"second_image"`
	ThirdImage  string  `json:"third_image"`
}

func (q *Queries) CreateHomestay(ctx context.Context, arg CreateHomestayParams) (Homestay, error) {
	row := q.db.QueryRowContext(ctx, createHomestay,
		arg.Description,
		arg.Address,
		arg.NumberOfBed,
		arg.Capacity,
		arg.Price,
		arg.Status,
		arg.MainImage,
		arg.FirstImage,
		arg.SecondImage,
		arg.ThirdImage,
	)
	var i Homestay
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Address,
		&i.NumberOfBed,
		&i.Capacity,
		&i.Price,
		&i.Status,
		&i.MainImage,
		&i.FirstImage,
		&i.SecondImage,
		&i.ThirdImage,
	)
	return i, err
}

const deleteHomestay = `-- name: DeleteHomestay :exec
DELETE FROM homestays WHERE id = $1
`

func (q *Queries) DeleteHomestay(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteHomestay, id)
	return err
}

const getHomestay = `-- name: GetHomestay :one
SELECT id, description, address, number_of_bed, capacity, price, status, main_image, first_image, second_image, third_image FROM homestays
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetHomestay(ctx context.Context, id int64) (Homestay, error) {
	row := q.db.QueryRowContext(ctx, getHomestay, id)
	var i Homestay
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Address,
		&i.NumberOfBed,
		&i.Capacity,
		&i.Price,
		&i.Status,
		&i.MainImage,
		&i.FirstImage,
		&i.SecondImage,
		&i.ThirdImage,
	)
	return i, err
}

const listHomestays = `-- name: ListHomestays :many
SELECT id, description, address, number_of_bed, capacity, price, status, main_image, first_image, second_image, third_image FROM homestays
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListHomestaysParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListHomestays(ctx context.Context, arg ListHomestaysParams) ([]Homestay, error) {
	rows, err := q.db.QueryContext(ctx, listHomestays, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Homestay{}
	for rows.Next() {
		var i Homestay
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Address,
			&i.NumberOfBed,
			&i.Capacity,
			&i.Price,
			&i.Status,
			&i.MainImage,
			&i.FirstImage,
			&i.SecondImage,
			&i.ThirdImage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHomestayInfo = `-- name: UpdateHomestayInfo :one
UPDATE homestays
SET description = $2, address = $3, number_of_bed = $4, capacity = $5, price = $6, main_image = $7, first_image = $8, second_image = $9, third_image = $10
WHERE id = $1
RETURNING id, description, address, number_of_bed, capacity, price, status, main_image, first_image, second_image, third_image
`

type UpdateHomestayInfoParams struct {
	ID          int64   `json:"id"`
	Description string  `json:"description"`
	Address     string  `json:"address"`
	NumberOfBed int32   `json:"number_of_bed"`
	Capacity    int32   `json:"capacity"`
	Price       float64 `json:"price"`
	MainImage   string  `json:"main_image"`
	FirstImage  string  `json:"first_image"`
	SecondImage string  `json:"second_image"`
	ThirdImage  string  `json:"third_image"`
}

func (q *Queries) UpdateHomestayInfo(ctx context.Context, arg UpdateHomestayInfoParams) (Homestay, error) {
	row := q.db.QueryRowContext(ctx, updateHomestayInfo,
		arg.ID,
		arg.Description,
		arg.Address,
		arg.NumberOfBed,
		arg.Capacity,
		arg.Price,
		arg.MainImage,
		arg.FirstImage,
		arg.SecondImage,
		arg.ThirdImage,
	)
	var i Homestay
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Address,
		&i.NumberOfBed,
		&i.Capacity,
		&i.Price,
		&i.Status,
		&i.MainImage,
		&i.FirstImage,
		&i.SecondImage,
		&i.ThirdImage,
	)
	return i, err
}

const updateHomestayStatus = `-- name: UpdateHomestayStatus :one
UPDATE homestays
SET status = $2
WHERE id = $1
RETURNING id, description, address, number_of_bed, capacity, price, status, main_image, first_image, second_image, third_image
`

type UpdateHomestayStatusParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateHomestayStatus(ctx context.Context, arg UpdateHomestayStatusParams) (Homestay, error) {
	row := q.db.QueryRowContext(ctx, updateHomestayStatus, arg.ID, arg.Status)
	var i Homestay
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Address,
		&i.NumberOfBed,
		&i.Capacity,
		&i.Price,
		&i.Status,
		&i.MainImage,
		&i.FirstImage,
		&i.SecondImage,
		&i.ThirdImage,
	)
	return i, err
}
