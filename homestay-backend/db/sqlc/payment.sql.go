// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: payment.sql

package db

import (
	"context"
	"time"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
  booking_id,
  amount,
  pay_date,
  pay_method,
  status
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, booking_id, amount, pay_date, pay_method, status
`

type CreatePaymentParams struct {
	BookingID string    `json:"booking_id"`
	Amount    float64   `json:"amount"`
	PayDate   time.Time `json:"pay_date"`
	PayMethod string    `json:"pay_method"`
	Status    string    `json:"status"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment,
		arg.BookingID,
		arg.Amount,
		arg.PayDate,
		arg.PayMethod,
		arg.Status,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.BookingID,
		&i.Amount,
		&i.PayDate,
		&i.PayMethod,
		&i.Status,
	)
	return i, err
}

const deletePayment = `-- name: DeletePayment :exec
DELETE FROM payments WHERE id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePayment, id)
	return err
}

const getPayment = `-- name: GetPayment :one
SELECT id, booking_id, amount, pay_date, pay_method, status FROM payments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPayment(ctx context.Context, id int64) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.BookingID,
		&i.Amount,
		&i.PayDate,
		&i.PayMethod,
		&i.Status,
	)
	return i, err
}

const getPaymentByBookingID = `-- name: GetPaymentByBookingID :one
SELECT id, booking_id, amount, pay_date, pay_method, status FROM payments
WHERE booking_id = $1 LIMIT 1
`

func (q *Queries) GetPaymentByBookingID(ctx context.Context, bookingID string) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getPaymentByBookingID, bookingID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.BookingID,
		&i.Amount,
		&i.PayDate,
		&i.PayMethod,
		&i.Status,
	)
	return i, err
}

const listPayments = `-- name: ListPayments :many
SELECT id, booking_id, amount, pay_date, pay_method, status FROM payments
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPaymentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPayments(ctx context.Context, arg ListPaymentsParams) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, listPayments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.BookingID,
			&i.Amount,
			&i.PayDate,
			&i.PayMethod,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaymentsUnpaid = `-- name: ListPaymentsUnpaid :many
SELECT id, booking_id, amount, pay_date, pay_method, status FROM payments
WHERE status = $3
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPaymentsUnpaidParams struct {
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
	Status string `json:"status"`
}

func (q *Queries) ListPaymentsUnpaid(ctx context.Context, arg ListPaymentsUnpaidParams) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentsUnpaid, arg.Limit, arg.Offset, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.BookingID,
			&i.Amount,
			&i.PayDate,
			&i.PayMethod,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const totalIncome = `-- name: TotalIncome :one
SELECT CAST(SUM(amount) AS FLOAT) AS TotalIncome FROM payments
WHERE (
pay_date BETWEEN $1 AND $2
AND status = $3)
`

type TotalIncomeParams struct {
	PayDate   time.Time `json:"pay_date"`
	PayDate_2 time.Time `json:"pay_date_2"`
	Status    string    `json:"status"`
}

func (q *Queries) TotalIncome(ctx context.Context, arg TotalIncomeParams) (float64, error) {
	row := q.db.QueryRowContext(ctx, totalIncome, arg.PayDate, arg.PayDate_2, arg.Status)
	var totalincome float64
	err := row.Scan(&totalincome)
	return totalincome, err
}

const updatePayment = `-- name: UpdatePayment :one
UPDATE payments
SET pay_date = $2, pay_method = $3, status = $4
WHERE id = $1
RETURNING id, booking_id, amount, pay_date, pay_method, status
`

type UpdatePaymentParams struct {
	ID        int64     `json:"id"`
	PayDate   time.Time `json:"pay_date"`
	PayMethod string    `json:"pay_method"`
	Status    string    `json:"status"`
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, updatePayment,
		arg.ID,
		arg.PayDate,
		arg.PayMethod,
		arg.Status,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.BookingID,
		&i.Amount,
		&i.PayDate,
		&i.PayMethod,
		&i.Status,
	)
	return i, err
}
